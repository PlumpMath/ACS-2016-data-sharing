(defvar *embedded-files* '()
  "List of files embedded in the output.")

(defun my-table-format (table contents info)
  (let* ((tblstart (org-element-property
		    :contents-begin table))
	 (tbl-data (save-excursion
		     (goto-char tblstart)
		     (org-babel-del-hlines
		      (org-babel-read-table))))
         (tblname (or (org-element-property :name table) (md5 (format "%s" tbl-data))))
	 (format (elt (plist-get info :back-end) 2))
	 (csv-file (concat tblname ".csv"))
	 (data-uri-data))

    ;; Here we convert the table data to a csv file
    (with-temp-file csv-file
      (loop for row in tbl-data
	    do
	    (insert
	     (mapconcat
	      (lambda (x) (format "\"%s\"" x))
	      row
	      ", " ))
	    (insert "\n"))
      (setq data-uri-data
	    (base64-encode-string
	     (buffer-string))))

    (add-to-list '*embedded-files* csv-file)

    (cond
     ;; HTML export
     ((eq format 'html)
      (concat
       (org-html-table table contents info)
       (format "<a href=\"%s\">%s</a>"
	       csv-file csv-file)
       " "
       (format (concat  "<a href=\"data:text/csv;"
                        "charset=US-ASCII;"
                        "base64,%s\">data uri</a>")
	       data-uri-data)))
     ;; LaTeX/PDF export
     ((eq format 'latex)
      (concat
       (org-latex-table table contents info)
       "\n"
       (format "%s: \\attachfile{%s}"
	       csv-file csv-file))))))
