(defun my-src-block-format (src-block contents info)
  "Custom export for src-blocks.
Saves code in block for embedding. Provides backend-specific
output."
  (let* ((srcname (org-element-property :name src-block))
	 (lang (org-element-property :language src-block))
	 (value (org-element-property :value src-block))
         (format (elt (plist-get info :back-end) 2))
	 (exts '(("python" . ".py")
		 ("emacs-lisp" . ".elisp")
		 ("C" . ".c")
		 ("R" . ".R")))
	 (fname (concat
		 (or srcname (md5 value))
		 (cdr (assoc lang exts))))
	 (data-uri-data))

    (with-temp-file fname
      (insert value)
      (setq data-uri-data (base64-encode-string
			   (buffer-string))))

    (add-to-list '*embedded-files* fname)

    (cond
     ;; HTML export
     ((eq format 'html)
      (concat
       (org-html-src-block src-block contents info)
       (format "<a href=\"%s\">%s</a>" fname fname)
       " "
       (format (concat "<a href=\"data:text/%s;"
                       "charset=US-ASCII;base64,"
                       "%s\">code uri</a>")
	       lang data-uri-data)))
     ;; LaTeX/PDF export
     ((eq format 'latex)
      (concat
       (org-latex-src-block src-block contents info)
       "\n"
       (format "%s: \\attachfile{%s}" fname fname))))))
